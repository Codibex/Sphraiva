@page "/Chat"  


<PageTitle>Chat</PageTitle>  

<MudPaper Class="pa-4 mx-auto" MaxWidth="500px" Elevation="4">
    <MudText Typo="Typo.h5" GutterBottom="true">Chat</MudText>
    <MudTextField @bind-Value="_inputText" Label="Nachricht" Variant="Variant.Outlined" Lines="3" FullWidth="true" AutoFocus="true"/>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Send" Disabled="_isLoading" Class="mt-2">
        Send
        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="ml-2" />
        }
    </MudButton>
    <MudDivider Class="my-4" />
    <MudText Typo="Typo.subtitle2" GutterBottom="true">Response:</MudText>
    <MudPaper Class="pa-2" Elevation="1" Style="min-height:60px;">
        @if (_isLoading)
        {
            <MudText Color="Color.Info"><em>Loading...</em></MudText>
        }
        else
        {
            <MudText>
                @((MarkupString)FormatResult(_result))
            </MudText>
        }
    </MudPaper>
</MudPaper>

@code {  
    private string _inputText = string.Empty;
    private bool _isLoading;
    private string? _result;

    [Inject] public required IMcpService McpService { get; set; }

    private async Task Send()  
    {
        try
        {
            _isLoading = true;
            _result = await McpService.ChatAsync(_inputText);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }  

    private string FormatResult(string? result)
    {
        return result?.Replace(@"\r\n", "<br />").Replace(@"\n", "<br />") ?? "No response";
    }
}
