@page "/chat"

<PageTitle>Chat</PageTitle>

<MudPaper Class="ma-4 pa-4 mx-auto main-content d-flex flex-column" MaxWidth="500px" Elevation="4">
    <MudText Typo="Typo.h5" GutterBottom="true">Chat</MudText>
    <MudPaper Class="pa-2 mb-4 chat" Elevation="1">
        @foreach (var msg in _messages)
        {
            if (msg.IsUser)
            {
                <MudChat ChatPosition="ChatBubblePosition.End" Variant="Variant.Outlined" Color="Color.Secondary">
                    <MudChatHeader Time="@(msg.GetTimeString())">@msg.User</MudChatHeader>
                    <MudChatBubble>@msg.Text</MudChatBubble>
                </MudChat>
            }
            else
            {
                <MudChat ChatPosition="ChatBubblePosition.Start" Variant="Variant.Outlined" Color="Color.Primary">
                    <MudChatHeader Time="@msg.GetTimeString()">@msg.User</MudChatHeader>
                    <MudChatBubble>@msg.Text</MudChatBubble>
                </MudChat>
            }
        }

    </MudPaper>
    <div>
        <MudTextField @bind-Value="_inputText" Label="Nachricht" Variant="Variant.Outlined" Lines="3" FullWidth="true" AutoFocus="true" Immediate="true" />
        <MudText>@_errorMessage</MudText>
        
        <div class="d-flex">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Send" Disabled="_isLoading || string.IsNullOrWhiteSpace(_inputText)" Class="mt-2">
                Senden
                @if (_isLoading)
                {
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="ml-2" />
                }
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="Abort" Disabled="!_isLoading" Class="mt-2 ml-2">
                Abort
            </MudButton>
        </div>
    </div>
    
</MudPaper>

@code {
    private string _inputText = string.Empty;
    private bool _isLoading;
    private CancellationTokenSource? _cancellationTokenSource;
    private readonly List<ChatMessage> _messages = [];
    private string _errorMessage = string.Empty;

    [Inject] public required IMcpService McpService { get; set; }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(_inputText))
        {
            return;
        }
        _isLoading = true;
        _cancellationTokenSource = new CancellationTokenSource();
        _messages.Add(ChatMessage.CreateUserMessage(_inputText));
        var input = _inputText;
        _inputText = string.Empty;
        try
        {
            var response = await McpService.ChatAsync(input, _cancellationTokenSource.Token);
            _messages.Add(ChatMessage.CreateAgentMessage(response));
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void Abort()
    {
        _cancellationTokenSource?.Cancel();
    }

    public record ChatMessage(string User, string Text, DateTime Timestamp, bool IsUser)
    {
        public static ChatMessage CreateUserMessage(string text) => new ChatMessage("User", text, DateTime.Now, true);
        public static ChatMessage CreateAgentMessage(string text) => new ChatMessage("Agent", text, DateTime.Now, false);

        public string GetTimeString() => Timestamp.ToShortTimeString();
    }
}
